##一、技术选型理由
选择Android是因为原生的 Android 应用使用 Java编程语言开发，并且很容易的移植到其他移动平台上。此外，由于学院课程安排过Android开发的学习，开发者对于该平台的开发有一定的了解与基础。官方Android开发有大量的开发支持，例如，Android Studio便是google为了Android 开发者提供的开发工具。Android Studio 会让开发者“更快、更具生产力”。Android Studio 的开发源自集成开发环境 IntelliJ IDEA，可以替代 Eclipse 平台。Android Studio 还是一套全功能开发环境。

##二、架构设计
Android端的应用分为四层。分别是：模型层、逻辑层、接口层、页面层。其中，模型层定义了数据模型；接口层用于使用服务器提供的API，进行应用与服务器的信息交互；逻辑层处理应用中出现的业务逻辑；界面层负责处理界面的展变化。其中，逻辑层、接口层与页面层都依赖模型层，页面层依赖逻辑层，逻辑层依赖接口层。

##三、模块划分
应用的模块分别是：
1.适配器模块:管理应用中的适配器。
2.活动类模块: 管理应用的各个activity。
3.数据模型模块: 应用所用到的数据模型类型。
4.接口模块： 管理应用与服务器交互的代码。
5.fragment模块：管理fragment逻辑，能够将activity分离成多个可重用的组件，每个都有它自己的生命周期和UI。
6.layout模块：应用的布局文件。
7.value模块：应用的环境值（文字、规格）等数据。

##四、软件设计技术
（1）Object-Oriented Programming ：每个Activity内显示出的页面都是一个独立的对象――fragment。通过管理fragment对象来达到页面逻辑跳转的变化，这么一来响应速度会更快，代码结构更清晰，不至于全部堆积在Activity下。例如Index下152行至169行处，根据底部导航的选择，通过fragmentManager操作fragment变动主页内的内容，此处就是应用了OO设计的想法。
(2)设计模式：应用了 单例设计模式、建造者模式、适配器模式、备忘录模式。
其中，单例模式应用在登录方面。如果用户从未登录，那么登录页面不会有响应，但是如果用户登录过，那么就会存在一个类存储该用户的信息，并且在应用全局内可以访问，用于应用的自动登录以及获取用户相关信息等。建造者模式应用在应用弹窗交互中，如dialog.builder等。适配器模式，用于不同的数据提供者使用一个适配器来向相同的对象提供服务，如应用中的ListView的Adapter。备忘录模式，应用中利用了sharepreference进行，来将数据结构序列化来存储Activity的状态
